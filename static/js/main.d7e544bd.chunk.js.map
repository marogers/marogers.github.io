{"version":3,"sources":["redux/actions.js","redux/actionTypes.js","components/Table.js","redux/selectors.js","App.js","redux/reducers/tables.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["setConfigureTable","table","type","payload","Table","directions","LTR_UP","RTL_UP","handleConfigure","props","color","n","x","m","w","d","buildTable","temp","cells","numGreyCells","rows","tableBody","currentDirection","greyCellsLeft","currentNumber","currentHtmlRow","cellKey","i","push","className","key","reverse","this","Number","id","style","border","width","onClick","React","Component","connect","getRedTable","store","tables","red","getGreenTable","green","getBlueTable","blue","cautionText","App","handleOk","state","setRedTable","setGreenTable","setBlueTable","handleCancel","validate","setState","cautionNote","updateN","updateX","updateM","updateW","updateD","class","configureTable","min","value","onChange","e","target","max","name","disabled","length","marginRight","current_state","configure","getConfigureTable","initialState","combineReducers","action","createStore","rootReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d7e544bd.chunk.js","sourcesContent":["import { SET_CONFIGURE_TABLE, SET_RED_TABLE, SET_GREEN_TABLE, SET_BLUE_TABLE } from \"./actionTypes\";\r\n\r\nexport const setConfigureTable = table => ({\r\n    type: SET_CONFIGURE_TABLE,\r\n    payload: table\r\n});\r\n\r\nexport const setRedTable = table => ({\r\n    type: SET_RED_TABLE,\r\n    payload: table\r\n});\r\n\r\nexport const setGreenTable = table => ({\r\n    type: SET_GREEN_TABLE,\r\n    payload: table\r\n});\r\n\r\nexport const setBlueTable = table => ({\r\n    type: SET_BLUE_TABLE,\r\n    payload: table\r\n});","export const SET_CONFIGURE_TABLE = \"SET_CONFIGURE_TABLE\";\r\nexport const SET_RED_TABLE = \"SET_RED_TABLE\";\r\nexport const SET_GREEN_TABLE = \"SET_GREEN_TABLE\";\r\nexport const SET_BLUE_TABLE = \"SET_BLUE_TABLE\";","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { setConfigureTable } from '../redux/actions';\r\n\r\n// Assumptions\r\n// 1) number of columns is locked at 5\r\n// 2) maximum will always match on the increment (e.g. if n = 0, x = 5, m != 9)\r\n// 3) only positive numbers allowed\r\n// 4) m > n\r\n// 5) x > 0\r\n\r\nclass Table extends React.Component {\r\n\r\n    directions = {\r\n        LTR_UP: 0,\r\n        RTL_UP: 1\r\n    }\r\n\r\n    handleConfigure = () => {\r\n        this.props.setConfigureTable(\r\n            {\r\n                color: this.props.color,\r\n                n: this.props.n,\r\n                x: this.props.x,\r\n                m: this.props.m,\r\n                w: this.props.w,\r\n                d: this.props.d\r\n            }\r\n        );\r\n    }\r\n\r\n    buildTable = (n, x, m, d) => {\r\n        // const greyCell = -1; // Some representative to indicate grey in a cell\r\n\r\n        // Figure out how many cells we'll need containing numbers\r\n        let temp = n\r\n        let cells = 1;\r\n        while (temp < m) {\r\n            cells++;\r\n            temp = temp + x;\r\n        }\r\n\r\n        // Figure out how many grey cells needed to fill out the table\r\n        let numGreyCells = 5 - (cells % 5);\r\n        numGreyCells = numGreyCells === 5 ? 0 : numGreyCells; // Discovered a situation where I was adding a whole row of only grey cells so this fixes that\r\n        let rows = (cells + numGreyCells) / 5; // Number of rows we'll need in the table\r\n        let startTop = 'left';\r\n        // Figure out which corner we'll need to start in at the top\r\n        if (d == this.directions.LTR_UP) { // === didn't work here consistently...\r\n            // If total cells divided by 5 is an even number then we start from the top left (woo!)\r\n            if (rows > 1 && (rows % 2) === 0) {\r\n                startTop = 'left';\r\n            } else {\r\n                startTop = 'right';\r\n            }\r\n        } else {\r\n            // The reverse of the above logic..\r\n            if (rows > 1 && (rows % 2) === 0) {\r\n                startTop = 'right';\r\n            } else {\r\n                startTop = 'left';\r\n            }\r\n        }\r\n\r\n        // let table = []; // 2-d array to simulate the table\r\n        let tableBody = []; // HTML table body\r\n        let currentDirection = 'LTR'; // Using a bit (0/1) to represent this would make some code shorter but letters help with readability\r\n        if (startTop === 'right') {\r\n            currentDirection = 'RTL';\r\n        }\r\n\r\n        let greyCellsLeft = numGreyCells;\r\n        // let currentRow = rows - 1; // Subtract 1 because we start with a zero index\r\n        let currentNumber = m; // Start at maximum and subtract x each iteration\r\n        let currentHtmlRow = []; // HTML row for storing columns\r\n        let cellKey = 0; // Some unique key to make react happy\r\n\r\n        // Each iteration of the loop should add an entire row to our table\r\n        while (currentNumber >= n) {\r\n            currentHtmlRow = [];\r\n            // if (typeof table[currentRow] === 'undefined' || table === null) {\r\n            //     table[currentRow] = [];\r\n            // }\r\n            if (currentDirection === 'LTR') {\r\n                for (let i = 0; i < 5; i++) {\r\n                    if (greyCellsLeft > 0) { // If we have grey cells to push, then add those first\r\n                        // table[currentRow][i] = greyCell;\r\n                        currentHtmlRow.push(<td className=\"grey\" key={cellKey}></td>);\r\n                        cellKey++;\r\n                        greyCellsLeft = greyCellsLeft - 1;\r\n                    } else { // ... otherwise add the next number\r\n                        // table[currentRow][i] = currentNumber;\r\n                        currentHtmlRow.push(<td key={cellKey}>{currentNumber}</td>);\r\n                        cellKey++;\r\n                        currentNumber = currentNumber - x;\r\n                    }\r\n                }\r\n            } else { // currentDirection === 'RTL'\r\n                for (let i = 4; i >= 0; i--) {\r\n                    if (greyCellsLeft > 0) { // If we have grey cells to push, then add those first\r\n                        // table[currentRow][i] = greyCell;\r\n                        currentHtmlRow.push(<td className=\"grey\" key={cellKey}></td>);\r\n                        cellKey++;\r\n                        greyCellsLeft--;\r\n                    } else { // ... otherwise add the next number\r\n                        // table[currentRow][i] = currentNumber;\r\n                        currentHtmlRow.push(<td key={cellKey}>{currentNumber}</td>);\r\n                        cellKey++;\r\n                        currentNumber = currentNumber - x;\r\n                    }\r\n                }\r\n            }\r\n            // currentRow = currentRow - 1; // Move to the next row\r\n            // Reverse direction\r\n            if (currentDirection === 'LTR') {\r\n                tableBody.push(<tr key={cellKey}>{currentHtmlRow}</tr>);\r\n                cellKey++;\r\n                currentDirection = 'RTL';\r\n            } else {\r\n                tableBody.push(<tr key={cellKey}>{currentHtmlRow.reverse()}</tr>);\r\n                cellKey++;\r\n                currentDirection = 'LTR';\r\n            }\r\n        }\r\n\r\n        return tableBody;\r\n    }\r\n\r\n    render() {\r\n        const tableBody = this.buildTable(Number(this.props.n), Number(this.props.x), Number(this.props.m), Number(this.props.d));\r\n        return (\r\n            <div className=\"table-container\" id={'table-' + this.props.color} style={{ border: '2px solid ' + this.props.color, width: this.props.w + '%' }}>\r\n                <table>\r\n                    <tbody>{tableBody}</tbody>\r\n                </table>\r\n                <div className=\"under-table-container\">\r\n                    <div className=\"configure-button-container\">\r\n                        <button type=\"button\" className=\"configure-button\" onClick={this.handleConfigure}>Configure</button>\r\n                    </div>\r\n                    <div className=\"width-span-container\">\r\n                        <span className=\"table-width-span\">{this.props.w}%</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null, { setConfigureTable })(Table);","export const getConfigureTable = store => store.tables.configure;\r\nexport const getRedTable = store => store.tables.red;\r\nexport const getGreenTable = store => store.tables.green;\r\nexport const getBlueTable = store => store.tables.blue;","import React from 'react';\nimport { connect } from 'react-redux';\nimport './App.css';\nimport Table from './components/Table.js';\nimport { getBlueTable, getConfigureTable, getGreenTable, getRedTable } from './redux/selectors';\nimport { setConfigureTable, setRedTable, setGreenTable, setBlueTable } from './redux/actions';\n\nconst cautionText = \"Invalid N, X, M: must follow rule: M = N + (X * y) where y is some positive integer\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cautionNote: ''\n    };\n  }\n\n  static getDerivedStateFromProps(props, current_state) {\n    if (props.configureTable !== null && props.configureTable.color !== current_state.color) {\n      return {\n        color: props.configureTable.color,\n        n: props.configureTable.n,\n        x: props.configureTable.x,\n        m: props.configureTable.m,\n        w: props.configureTable.w,\n        d: props.configureTable.d,\n        cautionNote: ''\n      };\n    }\n    return null;\n  }\n\n  directions = {\n    LTR_UP: 0,\n    RTL_UP: 1\n  }\n\n  handleOk = () => {\n    if (this.state.color === 'red') {\n      this.props.setRedTable(this.state);\n    } else if (this.state.color === 'green') {\n      this.props.setGreenTable(this.state);\n    } else if (this.state.color === 'blue') {\n      this.props.setBlueTable(this.state);\n    }\n  }\n\n  handleCancel = () => {\n    this.props.setConfigureTable(null);\n  }\n\n  validate = (n, x, m) => {\n    this.setState({\n      cautionNote: ''\n    });\n    if (x <= 0 || m <= n) {\n      this.setState({\n        cautionNote: cautionText\n      });\n      return;\n    }\n\n    // Make sure n goes into m using x\n    for (n; n < m; n = n + x) {\n      // Do nothing\n    }\n\n    if (n !== m) {\n      this.setState({\n        cautionNote: cautionText\n      });\n    }\n  }\n\n  updateN = n => {\n    this.validate(Number(n), Number(this.state.x), Number(this.state.m));\n    this.setState({ n });\n  }\n  updateX = x => {\n    this.validate(Number(this.state.n), Number(x), Number(this.state.m));\n    this.setState({ x });\n  }\n  updateM = m => {\n    this.validate(Number(this.state.n), Number(this.state.x), Number(m));\n    this.setState({ m });\n  }\n  updateW = w => {\n    this.setState({ w });\n  }\n  updateD = d => {\n    this.setState({ d });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Table class=\"table-red\" color={this.props.tables.red.color} n={this.props.tables.red.n} x={this.props.tables.red.x} m={this.props.tables.red.m} w={this.props.tables.red.w} d={this.props.tables.red.d}></Table>\n        <Table class=\"table-green\" color={this.props.tables.green.color} n={this.props.tables.green.n} x={this.props.tables.green.x} m={this.props.tables.green.m} w={this.props.tables.green.w} d={this.props.tables.green.d}></Table>\n        <Table class=\"table-blue\" color={this.props.tables.blue.color} n={this.props.tables.blue.n} x={this.props.tables.blue.x} m={this.props.tables.blue.m} w={this.props.tables.blue.w} d={this.props.tables.blue.d}></Table>\n\n        { this.props.configureTable !== null\n          ?\n          <div className=\"control-panel\">\n            <p>Table: <span className=\"control-header-identifier\" style={{ color: this.state.color }}>{this.state.color}</span></p>\n            <div className=\"input-container\">N = <input type=\"number\" min=\"0\" value={this.state.n} onChange={e => this.updateN(e.target.value)}></input></div>\n            <div className=\"input-container\">X = <input type=\"number\" min=\"1\" value={this.state.x} onChange={e => this.updateX(e.target.value)}></input></div>\n            <div className=\"input-container\">M = <input type=\"number\" min=\"1\" value={this.state.m} onChange={e => this.updateM(e.target.value)}></input></div>\n            <div className=\"input-container\">W = <input type=\"number\" min=\"0\" max=\"100\" value={this.state.w} onChange={e => this.updateW(e.target.value)}></input>%</div>\n            <div className=\"input-container\">D = <select name=\"direction\" value={this.state.d} onChange={e => this.updateD(e.target.value)}>\n                <option value=\"0\">LTR_UP</option>\n                <option value=\"1\">RTL_UP</option>\n              </select>\n            </div>\n            <div className=\"input-container\">\n              <button type=\"button\" className=\"control-button\" onClick={this.handleOk} disabled={this.state.cautionNote.length > 0} style={{ marginRight: '5px' }}>OK</button>\n              <button type=\"button\" className=\"control-button\" onClick={this.handleCancel}>CANCEL</button>\n            </div>\n            <div className=\"input-container\" style={{color: 'darkorange'}}>{this.state.cautionNote}</div>\n          </div>\n          :\n          null\n        }\n      </div>\n    );\n  }\n}\n\nconst MapStateToProps = (state) => {\n  const configureTable = getConfigureTable(state);\n  const tables = {\n    red: getRedTable(state),\n    green: getGreenTable(state),\n    blue: getBlueTable(state)\n  }\n  return { configureTable, tables };\n};\n\nexport default connect(MapStateToProps, { setConfigureTable, setRedTable, setGreenTable, setBlueTable })(App);\n","import { SET_CONFIGURE_TABLE, SET_RED_TABLE, SET_GREEN_TABLE, SET_BLUE_TABLE } from \"../actionTypes\";\r\n\r\nconst initialState = {\r\n  red: {\r\n    color: 'red',\r\n    n: 8,\r\n    x: 1,\r\n    m: 29,\r\n    w: 20,\r\n    d: 0\r\n  },\r\n  green: {\r\n    color: 'green',\r\n    n: 231,\r\n    x: 1,\r\n    m: 247,\r\n    w: 30,\r\n    d: 0\r\n  },\r\n  blue: {\r\n    color: 'blue',\r\n    n: 47,\r\n    x: 2,\r\n    m: 81,\r\n    w: 40,\r\n    d: 1\r\n  },\r\n  configure: null\r\n  // {\r\n  //   color: '',\r\n  //   n: 0,\r\n  //   x: 1,\r\n  //   m: 1,\r\n  //   w: 50,\r\n  //   d: 0\r\n  // }\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case SET_CONFIGURE_TABLE: {\r\n      return {\r\n        ...state,\r\n        configure: action.payload\r\n      };\r\n    }\r\n    case SET_RED_TABLE: {\r\n      return {\r\n        ...state,\r\n        red: action.payload\r\n      };\r\n    }\r\n    case SET_GREEN_TABLE: {\r\n      return {\r\n        ...state,\r\n        green: action.payload\r\n      };\r\n    }\r\n    case SET_BLUE_TABLE: {\r\n      return {\r\n        ...state,\r\n        blue: action.payload\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}","import { combineReducers } from \"redux\";\r\nimport tables from \"./tables\";\r\n\r\nexport default combineReducers({ tables });\r\n","import { createStore } from \"redux\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nexport default createStore(rootReducer);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}